There are two dictionaries checked into this repository:
game.dict - a list of 3-6 letter words suitable for use as the start
            and end words of a word ladder game
play.dict - a list of 3+ letter words that users can play in word
            ladder games

Both dictionaries were built from ENABLE's word.lst. Below is a description
of how they were built, in steps.

1) I decided to restrict words to 3-6 letters to keep games
 simple. I used a tiny one-off Python script to produce a reduced
 dictionary from ENABLE.
2) A friend pointed out that users should be able to play words >6
 letters, so I used the same Python script to produce a dictionary
 of words with 3 or more letters.
3) I realized that there were words in both dictionaries that could
 not be used in the word ladder game, as they had no possible moves
 to or from them. I wrote a script (complete.py, in this repository)
 that produces a complete list of possible moves from each word in the
 dictionary by brute force. It outputs one file per word, each
 containing the list of possible moves from that word, in a directory
 structure like: '/solution/a/d/advantage'. I then used a find|grep chain
 to get a list of words with zero moves:
 find /solution/ -type f | xargs wc -l | grep "^\s*0 " | awk '{ print $2 }' | xargs -L1 basename > zero-moves
 I then wrote and used another script (mungedict.py, in this repository)
 to remove the words in this list from both dictionaries.
4) There were still pairs of words in the dictionary whose only legal
 move was each other. I wrote findislands.py (in this repository) to
 generate a list of those words, and used mungedict.py to remove them
 from the dictionaries.
5) After writing a graph traversal of the dictionary, it was readily
 apparent that there was a large, well-connected set of words, and some
 other small islands of connectivity. It turned out that 96% of the
 dictionary was connected, and the other 4% not connected to that set.
 I wrote graphtraversal.py (in this repo) to produce the set of
 well-connected words, then diffed that against the original game
 dictionary to produce a list of unconnected words:
 diff game.dict connected.dict | grep "^<" | sed "s/^< //" > unconnected
 and used mungedict.py to remove them from the dictionary.

-- For difficulty ratings:
1) Get list of word frequencies from the British National Corpus, found
 at http://www.kilgarriff.co.uk/bnc-readme.html:
 wget http://www.kilgarriff.co.uk/BNClists/all.al.gz
 gunzip all.al.gz
2) Run difficulty.py. This finds the length of the shortest path from each
 start word to a 3-letter word, since most ladders will end up going that
 route (even if it's not the optimal route), and if it takes a lot of steps
 to get to a 3-letter word, then it's obviously a more difficult word.
3) Update your config.py to point to difficulty.dict instead of game.dict.
