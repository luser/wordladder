# These options are necessary for running the webapp (app.py)

### Both word lists below are a path to a dictionary containing one word per line

# The list of words that can be used as the start -> end pair
# for a game.
GAME_WORDLIST = "/path/to/game_word.lst"

# The list of words that can be entered by users.
# (probably word3up.lst)
PLAY_WORDLIST = "/path/to/play_word.lst"

### Difficulty score-related options.

# This file is a pickled table mapping difficulty scores to subsets of
# the GAME_WORDLIST, generated by difficulty.py.
DIFFICULTY_TABLE = "/path/to/difficulty.dict"

# Maps a difficulty level name to a numeric level and score multiplier.
DIFFICULTY_LEVELS = {'simple': [0, 0.8], 'easy': [1, 1.0], 'medium': [2, 1.2], 'hard': [3, 1.5], 'genius': [4, 2.0]}

# A set of ranges (indexes correspond to the numeric levels in
# DIFFICULTY_LEVELS) for mapping scores in the DIFFICULTY_TABLE to the
# levels above.
DIFFICULTY_SCORES = [range(0, 2), range(2, 5), range(5, 10), range(10, 18), range(18, 50)]

### Path to a directory writable by the user running the server.
# Used to store persistent state.
DATADIR = "/path/to/data"

### Hash key
# Any random string of characters, used to compute secure HMAC signatures.
HASHKEY = "changethis"

### User account services available
SERVICES = {
	'facebook': {
		'module': 'facebookoauth',
		'class': 'facebookOAuth',
		'login': 'authorize',
		'update': 'updateProfile',
	},
	'twitter': {
		'module': 'twitteroauth',
		'class': 'twitterOAuth',
		'login': 'authorize',
		'update': 'updateProfile',
	},
	'google': {
		'module': 'googleoauth',
		'class': 'googleOAuth',
		'login': 'authorize',
		'update': 'updateProfile',
	}
}

#---------------------------------------------------------------
# These options aren't necessary for running the webapp, just for
# other scripts (like graphtraverse.py and scoracle.py)

# Path to a directory containing a pre-generated list of possible
# moves for every word in the dictionary (as generated by complete.py).
SOLUTION_PATH = "/path/to/solutions"
# Path to a file containing an NxN byte matrix which stores the shortest
# possible path length between every pair of words in the dictionary
# (as generated by graphtraverse.py).
DISTANCE_MATRIX = "/path/to/distance_matrix"
